TebLocalPlannerROS:

 odom_topic: /odom
 # Trajectory 用于调整轨迹
  
 teb_autosize: True #是否自动更新/插入或是删除路径中的点
 dt_ref: 0.3 #用于判断是否插入新的点位。即两个点之间的距离/最大速度超过dt_ref，则会插入新的点位
 dt_hysteresis: 0.03 # 0.1 决定是否重写每个点位的朝向
 max_samples: 500
 global_plan_overwrite_orientation: True
 allow_init_with_backwards_motion: False
 max_global_plan_lookahead_dist: 0.6 #定局部规划初始轨迹的最大长度，实际调试发现此参数无需过大，因为局部轨迹在每个控制周期都被更新，实际执行的指令仅是轨迹上第一个点的速度值？改小？0.6
 global_plan_viapoint_sep: 2 
 global_plan_prune_distance: 1 #全局路径是从全局起始点到全局目标点的一条轨迹，而初始的局部路径仅是从机器人当前位置到局部目标点的一小段路径，全局路径裁剪其中一部分即局部路径，该参数决定了从机器人当前位置的后面一定距离开始裁剪 ？改小？
 exact_arc_length: False #用于g2o中添加边约束是使用，如果为true，则规划器在速度、加速度和转弯率计算中使用精确的弧长[增加的cpu时间]，否则使用欧氏近似。
 feasibility_check_no_poses: 2 #参数在判断生成的轨迹是否冲突时使用，此时设置为3，即从轨迹起点开始逐个检查轨迹上的3个点，若3个点均不发生碰撞，则认为本次轨迹有效，由于teb优化并非硬约束，这里相当于是轨迹生成之后的一层保障，这个参数因根据机器人的速度和环境复杂程度调整，否则极有可能出现在狭窄环境中走走停停的情况；5
 publish_feedback: False
    
 # Robot  重要！！！！！！！！！！！！！！！！！！！！！1
         
#  max_vel_x: 1 #机器人的最大平移速度，单位为 meters/sec 0.4 //0。6
#  max_vel_x_backwards: 1 #当向后移动时，机器人的最大绝对平移速度，单位为 meters/sec #0.2 //0。6
#  max_vel_y: 1  #
#  max_vel_theta: 2 #机器人的最大角速度，单位为 radians/sec 0.3
#  acc_lim_x: 0.8 # 机器人的最大线加速度，单位为 meters/sec^2  0.5
#  acc_lim_theta: 0.8 #机器人的最大角加速度，单位为 radians/sec^2 0.5
#  min_turning_radius: 0 # diff-drive robot (can turn on place!)

#  ------------------------------------------------------------------
#  the best 7月19号
#  max_vel_x: 2 #机器人的最大平移速度，单位为 meters/sec 0.4 //0。6
#  max_vel_x_backwards: 0.4 #当向后移动时，机器人的最大绝对平移速度，单位为 meters/sec #0.2 //0。6
#  max_vel_y: 0.4  #
#  max_vel_theta: 2 #机器人的最大角速度，单位为 radians/sec 0.3
#  acc_lim_x: 0.6 # 机器人的最大线加速度，单位为 meters/sec^2  0.6
#  acc_lim_theta: 1.6 #机器人的最大角加速度，单位为 radians/sec^2 0.5 0.8
#  min_turning_radius: 0.32 # diff-drive robot (can turn on place!)
#  ------------------------------------------------------------------

#5.25
#  max_vel_x: 1 #机器人的最大平移速度，单位为 meters/sec 0.4 //0。6  1
#  max_vel_x_backwards: 0.2 #当向后移动时，机器人的最大绝对平移速度，单位为 meters/sec #0.2 //0。6  0.4
#  max_vel_y: 0.4  #0.4
#  max_vel_theta: 3 #机器人的最大角速度，单位为 radians/sec 0.3
#  acc_lim_x: 0.6 # 机器人的最大线加速度，单位为 meters/sec^2  0.6 1
#  acc_lim_theta: 3 #机器人的最大角加速度，单位为 radians/sec^2 0.5 0.8
#  min_turning_radius: 0.0  # diff-drive robot (can turn on place!)

 max_vel_x: 15 #机器人的最大平移速度，单位为 meters/sec 0.4 //0。6  1
 max_vel_x_backwards: 0.2 #当向后移动时，机器人的最大绝对平移速度，单位为 meters/sec #0.2 //0。6  0.4
 max_vel_y: 15  #0.4
 max_vel_theta: 3 #机器人的最大角速度，单位为 radians/sec 0.3
 acc_lim_x: 0.9 # 机器人的最大线加速度，单位为 meters/sec^2  0.6 1 0.8(0)
 acc_lim_y: 1.0 # 机器人的最大线加速度，单位为 meters/sec^2  0.6 1 0.8(0)
 acc_lim_theta: 3 #机器人的最大角加速度，单位为 radians/sec^2 0.5 0.8
 min_turning_radius: 0.0  # diff-drive robot (can turn on place!)


#以下是与用于优化的足迹模型相关的参数：
 footprint_model:
   type: "point" #指定用于优化的机器人足迹模型的类型，
                #  有如“点”，“圆形”，“线”，“two_circles”和“多边形”的不同类型。
                #  但其模型的类型对所需的计算时间有显著的影响。

#  footprint_model: # types: "point", "circular", "line", "two_circles", "polygon"
#    type: "polygon"
#    vertices: [ [0.05, 0.08], [0.05, -0.08], [-0.05, -0.08], [-0.05, 0.08] ] # for type "polygon"
#  radius: 0.05 # for type "circular"
#  line_start: [0.0, 0.0] # for type "line"[x,y]
#  line_end: [0.1, 0.0] # for type "line"
#  front_offset: 0.2 # for type "two_circles"
#  front_radius: 0.2 # for type "two_circles"
#  rear_offset: 0.2 # for type "two_circles"
#  rear_radius: 0.2 # for type "two_circles"
  

 # GoalTolerance 部分的参数设置机器人停止运行的容差，根据实际情况调整。
    
 xy_goal_tolerance: 0.1 #允许的机器人到目标位置的最终欧氏距离（euclidean distance），单位为 meters 
 yaw_goal_tolerance: 0.1 #Allowed final orientation error in radians
 free_goal_vel: True #False 参数设置机器人在目标点速度的情况，Fasle为默认最终速度为0，即到目标位置的时候应该是保持静止状态。
 complete_global_plan: True
    
 # Obstacles 部分的参数用于对环境中障碍物的处理方式，体现在轨迹优化阶段
    
 min_obstacle_dist: 0.20 #与障碍的最小期望距离，单位 meters 。0.25 0.26
 inflation_dist: 0.25 #障碍物周围的缓冲区，需要比min_obstacle_dist大才有效。 hyt0.4 0.32
 include_costmap_obstacles: True #指定应否考虑到局部costmap的障碍，被标记为障碍物的每个单元格被认为是点障碍物
 costmap_obstacles_behind_robot_dist: 1.5 
 obstacle_poses_affected: 10 #障碍物位置与轨迹上最接近的姿态相连，以减少计算量，但同时也考虑了许多相邻的障碍物
 dynamic_obstacle_inflation_dist: 0.6
 include_dynamic_obstacles: false

# # costmap_converter_plugin: "costmap_converter::CostmapToPolygonsDBSMCCH"
#  costmap_converter_plugin: ""
# # # 它决定是否使用costmap_converter插件，原始costmap中障碍物全部以“点”来表示，计算机器人到障碍物的距离实际需要计算机器人到每一个“障碍物点”的距离，当环境非常复杂时计算代价会非常大。costmap_converter插件的作用是将障碍物预先表示成线段或多边形的形式，可以在一定程度上减轻后续计算距离的压力。
# # # 若设置为空字符，则视为禁用转换，将所有点视为点障碍。
#  costmap_converter_spin_thread: True #如果为true，则costmap转换器将以不同的线程调用其回调队列。
#  costmap_converter_rate: 5 #定义costmap_converter插件处理当前costmap的频率（该值不高于costmap更新率）,单位为 Hz 。
# # costmap_converter_plugin: ""
# # costmap_converter_spin_thread: true
# # costmap_converter_rate: 10.0




 # Optimization 部分的参数主要是设置优化框架中各部分的权重大小
    
 no_inner_iterations: 5 #  5 在每个外循环迭代中调用的实际求解器迭代次数。
                        #参考参数 no_outer_iterations。
 no_outer_iterations: 4 #  4 每个外循环自动根据期望的时间分辨率dt_ref调整轨迹大小，并调用内部优化器（执行参数no_inner_iterations）。 因此，每个规划周期中求解器迭代的总数是两个值的乘积。
 optimization_activate: True #
 optimization_verbose: False
 penalty_epsilon: 0.1 #为硬约束近似的惩罚函数添加一个小的安全范围，就是在到达速度限制前会产生一定的惩罚让其提前减速达到缓冲的效果。0.1
 obstacle_cost_exponent: 1
 weight_max_vel_x: 2 #满足最大允许平移速度的优化权重。2
 weight_max_vel_y: 10
 weight_max_vel_theta: 3 #满足最大允许角速度的优化权重。1  3（调了）
 weight_acc_lim_x: 5 #满足最大允许平移加速度的优化权重。
 weight_acc_lim_y: 5 #满足最大允许平移加速度的优化权重。
#  max_vel_x: 1 #机器人的最大平移速度，单位为 meters/sec 0.4 //0。6
 weight_acc_lim_theta: 5 #满足最大允许角加速度的优5化权重。
 weight_kinematics_nh: 400 #用于满足 non-holonomic 运动学的优化权重（由于运动学方程构成等式约束，该参数必须很高）100
 weight_kinematics_forward_drive: 1000 #强制机器人仅选择正向（正的平移速度）的优化权重。//10
                                    #重量小的机器人仍然可以向后移动。
 weight_kinematics_turning_radius: 500 #采用最小转向半径的优化权重（仅适用于四驱驱动机器人）1
 weight_optimaltime: 150   # must be > 0   //20  //45 30     hyt80
 weight_shortest_path: 0
 weight_obstacle: 45 #保持与障碍物的最小距离的优化权重。  //50  30（调了）
 weight_inflation: 0.12 #膨胀区惩罚的优化权重（值应该很小） //0.15  0.17(调了)
#  weight_dynamic_obstacle: 50
#  weight_dynamic_obstacle_inflation: 0.1
 weight_viapoint: 1
 weight_adapt_factor: 2 #Some special weights (currently weight_obstacle) are repeatedly scaled by this factor in each outer TEB iteration (weight_new = weight_old*factor). Increasing weights iteratively instead of setting a huge value a-priori leads to better numerical conditions of the underlying optimization problem.

 # Homotopy Class Planner 部分的参数与HomotopyClass规划器相关“enable_homotopy_class_planning”设置False选择不启用。

 enable_homotopy_class_planning:  False #!!!!!!!!!!!!!在不同的拓扑里激活并行规划（因为一次优化多个轨迹，所以需要占用更多的CPU资源）True
 enable_multithreading: False #激活多个线程，以便在不同的线程中规划每个轨迹。TRUE hyt
 max_number_classes: 2 #指定考虑到的不同轨迹的最大数量（限制计算量）允许线程数
 selection_cost_hysteresis: 1.0 #Specify how much trajectory cost must a new candidate have w.r.t. a previously selected trajectory in order to be selected (selection if new_cost < old_cost*factor).
 selection_prefer_initial_plan: 0.95
 selection_obst_cost_scale: 100.0 #Extra scaling of obstacle cost terms just for selecting the 'best' candidate.
 selection_alternative_time_cost: False #If true, time cost (sum of squared time differences) is replaced by the total transition time (sum of time differences).
 
 roadmap_graph_no_samples: 15 #指定为创建路线图而生成的样本数。
 roadmap_graph_area_width: 5 #指定该区域的宽度。
                             #在开始和目标之间的矩形区域中采样随机关键点/航点(keypoints/waypoints)。
 roadmap_graph_area_length_scale: 1.0
 h_signature_prescaler: 1 #放用于区分同伦类的内部参数（H-signature）。
                            #警告：只能减少此参数，如果在局部costmap中遇到太多障碍物的情况，请勿选择极低值，否则无法将障碍物彼此区分开（0.2 < value <= 1）。

 h_signature_threshold: 0.1 
 obstacle_heading_threshold: 0.45 
 switching_blocking_period: 0.0
 viapoints_all_candidates: True 
 delete_detours_backwards: True
 max_ratio_detours_duration_best_duration: 3.0
 visualize_hc_graph: False
 visualize_with_time_as_z_axis_scale: False

# Recovery
 
 shrink_horizon_backup: True
 shrink_horizon__duration: 10
 oscillation_recovery: True
 oscillation_v_eps: 0.1
 oscillation_omega_eps: 0.1
 oscillation_recovery_min_duration: 10
 oscillation_filter_duration: 10
 obstacle_association_force_inclusion_factor: 3
